name: Deploy to AWS EC2

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up JDK 8
      uses: actions/setup-java@v4
      with:
        java-version: '8'
        distribution: 'adopt'
    
    - name: Build with Maven
      run: mvn clean package -DskipTests
    
    - name: Verify JAR file
      run: |
        ls -la target/
        echo "JAR file created:"
        ls target/*.jar
    
    - name: Prepare EC2 Environment
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          set +e  # Don't exit on errors, handle them manually
          
          # Create application directory
          sudo mkdir -p /home/project/affiliate
          sudo chown ubuntu:ubuntu /home/project/affiliate
          sudo chmod 755 /home/project/affiliate
          
          cd /home/project/affiliate
          
          # Create necessary subdirectories
          mkdir -p logs uploads/images uploads/metadata
          
          # Stop existing application
          if pgrep -f "pet-tracker-review" > /dev/null; then
            echo "Stopping existing application..."
            pkill -f "pet-tracker-review" || true
            sleep 5
            echo "Previous application stopped"
          else
            echo "No existing application running"
          fi
          
          echo "Environment prepared"
    
    - name: Upload JAR file
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_SSH_KEY }}
        source: "target/pet-tracker-review-*.jar"
        target: "/home/project/affiliate/"
        strip_components: 1
    
    - name: Start Application
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          set +e  # Don't exit on errors initially
          
          cd /home/project/affiliate
          
          # Backup old version if exists
          if [ -f pet-tracker-review.jar ]; then
            mv pet-tracker-review.jar pet-tracker-review-backup.jar
          fi
          
          # Rename new JAR
          mv pet-tracker-review-*.jar pet-tracker-review.jar
          
          # Set permissions
          chmod 644 pet-tracker-review.jar
          
          # Start application
          echo "Starting Pet Tracker Review application..."
          nohup java -jar pet-tracker-review.jar \
            --spring.profiles.active=prod \
            --server.port=8089 \
            > logs/app.log 2>&1 &
          
          # Check if started
          sleep 8
          if pgrep -f "pet-tracker-review" > /dev/null; then
            PID=$(pgrep -f "pet-tracker-review")
            echo "✅ Application started successfully! PID: $PID"
            echo "🌐 Application is running on port 8089"
            echo "🚀 Deployment completed!"
            exit 0
          else
            echo "❌ Application failed to start"
            echo "Log output:"
            tail -20 logs/app.log 2>/dev/null || echo "No log file found"
            exit 1
          fi