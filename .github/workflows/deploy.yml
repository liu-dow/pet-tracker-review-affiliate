name: CI/CD - Build and Deploy JAR

on:
  push:
    branches:
      - master  # Listen for pushes to master branch

jobs:
  build:
    name: Build JAR
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 8
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '8'

      - name: Build with Maven
        run: mvn clean package -DskipTests

      - name: Upload JAR artifact
        uses: actions/upload-artifact@v4
        with:
          name: pet-tracker-review-app
          path: target/*.jar

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up JDK 8
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '8'

      - name: Build JAR
        run: mvn clean package -DskipTests

      - name: Check JAR file before SCP
        run: |
          if [ -f target/*.jar ]; then
            echo "JAR file found, proceeding with SCP."
            ls -la target/*.jar
          else
            echo "JAR file not found! Build might have failed."
            exit 1
          fi

      - name: Remove old JAR file on remote server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          timeout: 60s
          command_timeout: 120s
          script: |
            set +e  # Don't exit on errors
            echo "🔍 Starting cleanup process..."
            
            # Check current directory
            echo "📁 Current directory: $(pwd)"
            
            # Create directory if not exists
            echo "📂 Creating project directory..."
            sudo mkdir -p /home/project/affiliate
            sudo chown ${{ secrets.EC2_USERNAME }}:${{ secrets.EC2_USERNAME }} /home/project/affiliate
            
            # Change to project directory
            cd /home/project/affiliate
            echo "📁 Working directory: $(pwd)"
            
            # Stop existing application gracefully
            echo "🛑 Stopping existing application..."
            if pgrep -f "pet-tracker-review" > /dev/null; then
              echo "Found running application, stopping it..."
              pkill -f "pet-tracker-review" || true
              sleep 3
              
              # Force kill if still running
              if pgrep -f "pet-tracker-review" > /dev/null; then
                echo "Force killing remaining processes..."
                pkill -9 -f "pet-tracker-review" || true
                sleep 2
              fi
            else
              echo "No existing application found"
            fi
            
            # Remove old JAR file
            if [ -f pet-tracker-review-1.0.0.jar ]; then
              echo "🗑️ Removing old JAR file..."
              rm -f pet-tracker-review-1.0.0.jar
              echo "✅ Old JAR file removed"
            else
              echo "ℹ️ No old JAR file found"
            fi
            
            # Clean up old target directory if exists
            if [ -d target ]; then
              echo "🧹 Cleaning old target directory..."
              rm -rf target
            fi
            
            echo "✅ Cleanup completed"

      - name: Deploy to Server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "target/*.jar"
          target: "/home/project/affiliate"
          timeout: 120s

      - name: Restart Application
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          timeout: 60s
          command_timeout: 120s
          script: |
            set +e  # Don't exit on errors
            
            cd /home/project/affiliate
            echo "📁 Current directory: $(pwd)"
            
            # Verify JAR file was uploaded
            echo "🔍 Checking uploaded files..."
            ls -la
            
            if [ -f target/pet-tracker-review-1.0.0.jar ]; then
              echo "✅ JAR file found in target directory"
              
              # Move JAR to root directory for easier access
              echo "📦 Moving JAR file..."
              cp target/pet-tracker-review-1.0.0.jar ./pet-tracker-review.jar
              chmod 644 pet-tracker-review.jar
              
            else
              echo "❌ JAR file not found!"
              echo "Files in current directory:"
              ls -la
              echo "Files in target directory:"
              ls -la target/ || echo "Target directory not found"
              exit 1
            fi
            
            # Check Java installation
            echo "☕ Checking Java installation..."
            java -version || {
              echo "❌ Java not found!"
              exit 1
            }
            
            # Start application
            echo "🚀 Starting Pet Tracker Review application..."
            nohup java -jar pet-tracker-review.jar \
              --spring.profiles.active=prod \
              --server.port=8089 \
              > app.log 2>&1 &
            
            # Get the PID
            APP_PID=$!
            echo "Application started with PID: $APP_PID"
            
            # Wait for startup
            echo "⏳ Waiting for application to start..."
            sleep 15
            
            # Check if application is still running
            if kill -0 "$APP_PID" 2>/dev/null; then
              echo "✅ Application is running with PID: $APP_PID"
              
              # Check if port is listening
              if netstat -tuln | grep :8089 > /dev/null 2>&1; then
                echo "✅ Port 8089 is listening"
                echo "🌐 Application is accessible on port 8089"
              else
                echo "⚠️ Port 8089 not yet listening, but process is running"
              fi
              
              echo "🚀 Deployment completed successfully!"
            else
              echo "❌ Application failed to start or crashed"
              echo "📄 Recent log output:"
              tail -20 app.log 2>/dev/null || echo "No log file found"
              exit 1
            fi