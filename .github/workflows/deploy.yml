name: CI/CD - Build and Deploy JAR

on:
  push:
    branches:
      - master  # Listen for pushes to master branch

jobs:
  build:
    name: Build JAR
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 8
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '8'

      - name: Build with Maven
        run: mvn clean package -DskipTests

      - name: Upload JAR artifact
        uses: actions/upload-artifact@v4
        with:
          name: pet-tracker-review-app
          path: target/*.jar

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Download JAR artifact
        uses: actions/download-artifact@v4
        with:
          name: pet-tracker-review-app
          path: target/

      - name: Verify JAR file
        run: |
          JAR_COUNT=$(find target/ -name "*.jar" -type f | wc -l)
          if [ "$JAR_COUNT" -gt 0 ]; then
            echo "JAR file(s) found, proceeding with deployment."
            find target/ -name "*.jar" -type f -exec ls -la {} \;
          else
            echo "JAR file not found! Download might have failed."
            ls -la target/ || echo "Target directory not found"
            exit 1
          fi

      - name: Backup and Deploy JAR
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          timeout: 60s
          command_timeout: 120s
          script: |
            set +e  # Don't exit on errors
            echo "üîç Starting backup and cleanup process..."

            # Create directory if not exists
            sudo mkdir -p /home/project/affiliate
            sudo chown ${{ secrets.EC2_USERNAME }}:${{ secrets.EC2_USERNAME }} /home/project/affiliate

            # Change to project directory
            cd /home/project/affiliate
            echo "üìÅ Working directory: $(pwd)"

            # Backup existing JAR files
            if [ -f pet-tracker-review.jar ]; then
              echo "üíæ Backing up existing JAR file..."
              cp pet-tracker-review.jar pet-tracker-review.jar.backup.$(date +%Y%m%d_%H%M%S)
              echo "‚úÖ Backup completed"
            fi

            # Clean up target directory
            rm -rf target || true
            echo "‚úÖ Ready for new deployment"

      - name: Upload JAR to Server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "target/*.jar"
          target: "/home/project/affiliate"
          timeout: 120s

      - name: Setup JAR file
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          timeout: 30s
          script: |
            cd /home/project/affiliate

            # Find and setup the uploaded JAR file
            JAR_FILE=$(find target/ -name "*.jar" -type f | head -n 1)
            if [ -n "$JAR_FILE" ] && [ -f "$JAR_FILE" ]; then
              echo "‚úÖ JAR file uploaded: $JAR_FILE"
              cp "$JAR_FILE" ./pet-tracker-review.jar
              chmod 644 pet-tracker-review.jar
              echo "üì¶ JAR file ready: pet-tracker-review.jar"
              echo "üöÄ Upload completed successfully!"
            else
              echo "‚ùå JAR file upload failed!"
              exit 1
            fi